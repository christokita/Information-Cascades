##########
# Load packages
##########
library(ggplot2)
library(dplyr)
####################
# My preferred theme
####################
theme_ctokita <- function() {
theme_classic() +
theme(axis.text       = element_text(size = 6, color = "black"),
axis.title      = element_text(size = 7, color = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3),
legend.title    = element_text(size = 7, face = "bold", vjust = -1),
legend.text     = element_text(size = 6, color = "black"),
strip.text      = element_text(size = 7, color = "black"),
legend.key.size = unit(3, "mm"))
}
############## Assortatiity ##############
##########
# Load data and summarise
##########
assort_data <- read.csv('output/network_break/data_derived/social_networks/n200_gammasweep_assortativity.csv', header = TRUE)
assort_sum <- assort_data %>%
group_by(Gamma) %>%
summarise(Assort_mean = mean(Assortativity),
Assort_sd = sd(Assortativity),
Assort_95error = qnorm(0.975)*sd(Assortativity)/sqrt(length(Assortativity)))
##########
# Plot
##########
gg_assort <- ggplot(data = assort_sum, aes(x = Gamma, y = Assort_mean)) +
geom_hline(aes(yintercept = 0), size = 0.3, linetype = "dotted") +
# geom_vline(aes(xintercept = 0), size = 0.3, linetype = "dotted") +
geom_ribbon(aes(ymin = Assort_mean - Assort_95error, ymax = Assort_mean + Assort_95error), alpha = 0.4,  fill = "#525252") +
geom_line(color = "#000000", size = 0.3) +
geom_point(color = "#000000", size = 0.8) +
ylab(expression( paste("Assortativity, ", r[global]) )) +
xlab(expression( paste("Information correlation", gamma) )) +
theme_ctokita()
gg_assort
##########
# Plot
##########
gg_assort <- ggplot(data = assort_sum, aes(x = Gamma, y = Assort_mean)) +
geom_hline(aes(yintercept = 0), size = 0.3, linetype = "dotted") +
# geom_vline(aes(xintercept = 0), size = 0.3, linetype = "dotted") +
geom_ribbon(aes(ymin = Assort_mean - Assort_95error, ymax = Assort_mean + Assort_95error), alpha = 0.4,  fill = "#525252") +
geom_line(color = "#000000", size = 0.3) +
geom_point(color = "#000000", size = 0.8) +
ylab(expression( paste("Assortativity, ", italic(r[global])) )) +
xlab(expression( paste("Information correlation", gamma) )) +
theme_ctokita()
gg_assort
##########
# Plot
##########
gg_assort <- ggplot(data = assort_sum, aes(x = Gamma, y = Assort_mean)) +
geom_hline(aes(yintercept = 0), size = 0.3, linetype = "dotted") +
# geom_vline(aes(xintercept = 0), size = 0.3, linetype = "dotted") +
geom_ribbon(aes(ymin = Assort_mean - Assort_95error, ymax = Assort_mean + Assort_95error), alpha = 0.4,  fill = "#525252") +
geom_line(color = "#000000", size = 0.3) +
geom_point(color = "#000000", size = 0.8) +
ylab(expression( paste("Assortativity, ", italic(r[global])) )) +
xlab(expression( paste("Information correlation, ", gamma) )) +
theme_ctokita()
gg_assort
##########
# Plot
##########
gg_assort <- ggplot(data = assort_sum, aes(x = Gamma, y = Assort_mean)) +
geom_hline(aes(yintercept = 0), size = 0.3, linetype = "dotted") +
# geom_vline(aes(xintercept = 0), size = 0.3, linetype = "dotted") +
geom_ribbon(aes(ymin = Assort_mean - Assort_95error, ymax = Assort_mean + Assort_95error), alpha = 0.4,  fill = "#525252") +
geom_line(color = "#000000", size = 0.3) +
geom_point(color = "#000000", size = 0.8) +
ylab(expression( paste("Assortativity, ", italic(r[global])) )) +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_assort
ggsave("output/network_break/plots/SocialNet_assortativity_gamma.png", width = 45, height = 45, units = "mm", dpi = 400)
##########
# Load packages
##########
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(scales)
library(ggpubr)
####################
# My preferred theme
####################
theme_ctokita <- function() {
theme_classic() +
theme(axis.text       = element_text(size = 6, color = "black"),
axis.title      = element_text(size = 7, color = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3),
legend.title    = element_text(size = 7, face = "bold", vjust = -1),
legend.text     = element_text(size = 6, color = "black"),
strip.text      = element_text(size = 7, color = "black"),
legend.key.size = unit(3, "mm"))
}
############## Cascade difference among types ##############
##########
# Load data
##########
# Read in data
cascade_data <- read.csv('output/network_break/data_derived/cascades/n200_rollingavg.csv', header = TRUE)
# Set aside group for plots with less data
cascade_look <- cascade_data %>%
filter(gamma %in% c(0.9, 0.5, 0, -0.5, -0.9))
# Data set for end points on graph
end_time <- max(cascade_data$start)
cascade_ends <- cascade_data %>%
filter(start == end_time)
# Data set for emphasis lines
cascade_emph <- cascade_data %>%
filter(gamma %in% c(1, -1))
cascade_emph_ends <- cascade_emph %>%
filter(start == end_time)
# Set color palette
pal <- brewer.pal(length(unique(cascade_look$gamma)), "PuOr")
##########
# Plot: Rolling averages
##########
# Cascade size
gg_size <- ggplot() +
# Plot all data
geom_line(data = cascade_data,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.2,
alpha = 0.5) +
geom_point(data = cascade_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.1) +
# Plot emphasis lines
geom_line(data = cascade_emph,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.3) +
geom_point(data = cascade_emph_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.6) +
# General plotting controls
scale_color_gradientn(colors = pal,
name = expression(paste(bold("Information\ncorrelation, "), italic(gamma))),
breaks = seq(-1, 1, 0.5),
labels = c("-1.0   (Opposing coverage)",
"-0.5",
"0.0   (Disjointed coverage)",
"0.5",
"1.0   (Mirrored coverage)")) +
scale_x_continuous(labels = comma) +
ylab(expression( paste("Cascade size, ", italic(X[A,t] + X[B,t])))) +
xlab(expression(paste("Time step, ", italic(t) ))) +
theme_ctokita() +
theme(legend.key.height = unit(5, "mm"),
legend.title = element_text(face = "bold"))
gg_size + theme(legend.position = "none")
##########
# Plot: Rolling averages
##########
# Cascade size
gg_size <- ggplot() +
# Plot all data
geom_line(data = cascade_data,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.2,
alpha = 0.5) +
geom_point(data = cascade_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.1) +
# Plot emphasis lines
geom_line(data = cascade_emph,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.3) +
geom_point(data = cascade_emph_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.6) +
# General plotting controls
scale_color_gradientn(colors = pal,
name = expression(paste(bold("Information\ncorrelation, "), italic(gamma))),
breaks = seq(-1, 1, 0.5),
labels = c("-1.0   (Opposing coverage)",
"-0.5",
"0.0   (Disjointed coverage)",
"0.5",
"1.0   (Mirrored coverage)")) +
scale_x_continuous(labels = comma) +
ylab(expression( paste("Cascade size, ", italic(X[At] + X[B,t])))) +
xlab(expression(paste("Time step, ", italic(t) ))) +
theme_ctokita() +
theme(legend.key.height = unit(5, "mm"),
legend.title = element_text(face = "bold"))
gg_size + theme(legend.position = "none")
##########
# Plot: Rolling averages
##########
# Cascade size
gg_size <- ggplot() +
# Plot all data
geom_line(data = cascade_data,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.2,
alpha = 0.5) +
geom_point(data = cascade_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.1) +
# Plot emphasis lines
geom_line(data = cascade_emph,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.3) +
geom_point(data = cascade_emph_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.6) +
# General plotting controls
scale_color_gradientn(colors = pal,
name = expression(paste(bold("Information\ncorrelation, "), italic(gamma))),
breaks = seq(-1, 1, 0.5),
labels = c("-1.0   (Opposing coverage)",
"-0.5",
"0.0   (Disjointed coverage)",
"0.5",
"1.0   (Mirrored coverage)")) +
scale_x_continuous(labels = comma) +
ylab(expression( paste("Cascade size, ", italic(X[A","t] + X[B,t])))) +
xlab(expression(paste("Time step, ", italic(t) ))) +
theme_ctokita() +
theme(legend.key.height = unit(5, "mm"),
legend.title = element_text(face = "bold"))
gg_size + theme(legend.position = "none")
##########
# Plot: Rolling averages
##########
# Cascade size
gg_size <- ggplot() +
# Plot all data
geom_line(data = cascade_data,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.2,
alpha = 0.5) +
geom_point(data = cascade_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.1) +
# Plot emphasis lines
geom_line(data = cascade_emph,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.3) +
geom_point(data = cascade_emph_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.6) +
# General plotting controls
scale_color_gradientn(colors = pal,
name = expression(paste(bold("Information\ncorrelation, "), italic(gamma))),
breaks = seq(-1, 1, 0.5),
labels = c("-1.0   (Opposing coverage)",
"-0.5",
"0.0   (Disjointed coverage)",
"0.5",
"1.0   (Mirrored coverage)")) +
scale_x_continuous(labels = comma) +
ylab(expression( paste("Cascade size, ", italic(X[A","t] + X[B,t])))) +
xlab(expression(paste("Time step, ", italic(t) ))) +
theme_ctokita() +
theme(legend.key.height = unit(5, "mm"),
legend.title = element_text(face = "bold"))
##########
# Plot: Rolling averages
##########
# Cascade size
gg_size <- ggplot() +
# Plot all data
geom_line(data = cascade_data,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.2,
alpha = 0.5) +
geom_point(data = cascade_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.1) +
# Plot emphasis lines
geom_line(data = cascade_emph,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.3) +
geom_point(data = cascade_emph_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.6) +
# General plotting controls
scale_color_gradientn(colors = pal,
name = expression(paste(bold("Information\ncorrelation, "), italic(gamma))),
breaks = seq(-1, 1, 0.5),
labels = c("-1.0   (Opposing coverage)",
"-0.5",
"0.0   (Disjointed coverage)",
"0.5",
"1.0   (Mirrored coverage)")) +
scale_x_continuous(labels = comma) +
ylab(expression( paste("Cascade size, ", italic(X[A\,t] + X[B,t])))) +
xlab(expression(paste("Time step, ", italic(t) ))) +
theme_ctokita() +
theme(legend.key.height = unit(5, "mm"),
legend.title = element_text(face = "bold"))
##########
# Plot: Rolling averages
##########
# Cascade size
gg_size <- ggplot() +
# Plot all data
geom_line(data = cascade_data,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.2,
alpha = 0.5) +
geom_point(data = cascade_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.1) +
# Plot emphasis lines
geom_line(data = cascade_emph,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.3) +
geom_point(data = cascade_emph_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.6) +
# General plotting controls
scale_color_gradientn(colors = pal,
name = expression(paste(bold("Information\ncorrelation, "), italic(gamma))),
breaks = seq(-1, 1, 0.5),
labels = c("-1.0   (Opposing coverage)",
"-0.5",
"0.0   (Disjointed coverage)",
"0.5",
"1.0   (Mirrored coverage)")) +
scale_x_continuous(labels = comma) +
ylab(expression( paste("Cascade size, ", italic(X[A,t] + X[B,t])))) +
xlab(expression(paste("Time step, ", italic(t) ))) +
theme_ctokita() +
theme(legend.key.height = unit(5, "mm"),
legend.title = element_text(face = "bold"))
gg_size + theme(legend.position = "none")
##########
# Plot: Rolling averages
##########
# Cascade size
gg_size <- ggplot() +
# Plot all data
geom_line(data = cascade_data,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.2,
alpha = 0.5) +
geom_point(data = cascade_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.1) +
# Plot emphasis lines
geom_line(data = cascade_emph,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.3) +
geom_point(data = cascade_emph_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.6) +
# General plotting controls
scale_color_gradientn(colors = pal,
name = expression(paste(bold("Information\ncorrelation, "), italic(gamma))),
breaks = seq(-1, 1, 0.5),
labels = c("-1.0   (Opposing coverage)",
"-0.5",
"0.0   (Disjointed coverage)",
"0.5",
"1.0   (Mirrored coverage)")) +
scale_x_continuous(labels = comma) +
ylab(expression( paste("Cascade size, ", italic(X[paste(A, ",", t)] + X[B,t])))) +
xlab(expression(paste("Time step, ", italic(t) ))) +
theme_ctokita() +
theme(legend.key.height = unit(5, "mm"),
legend.title = element_text(face = "bold"))
gg_size + theme(legend.position = "none")
##########
# Plot: Rolling averages
##########
# Cascade size
gg_size <- ggplot() +
# Plot all data
geom_line(data = cascade_data,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.2,
alpha = 0.5) +
geom_point(data = cascade_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.1) +
# Plot emphasis lines
geom_line(data = cascade_emph,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.3) +
geom_point(data = cascade_emph_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.6) +
# General plotting controls
scale_color_gradientn(colors = pal,
name = expression(paste(bold("Information\ncorrelation, "), italic(gamma))),
breaks = seq(-1, 1, 0.5),
labels = c("-1.0   (Opposing coverage)",
"-0.5",
"0.0   (Disjointed coverage)",
"0.5",
"1.0   (Mirrored coverage)")) +
scale_x_continuous(labels = comma) +
ylab(expression( paste("Cascade size, ", italic(X[paste(A, ",", t)] + X[paste(A, ",", t)])))) +
xlab(expression(paste("Time step, ", italic(t) ))) +
theme_ctokita() +
theme(legend.key.height = unit(5, "mm"),
legend.title = element_text(face = "bold"))
gg_size + theme(legend.position = "none")
##########
# Plot: Rolling averages
##########
# Cascade size
gg_size <- ggplot() +
# Plot all data
geom_line(data = cascade_data,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.2,
alpha = 0.5) +
geom_point(data = cascade_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.1) +
# Plot emphasis lines
geom_line(data = cascade_emph,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.3) +
geom_point(data = cascade_emph_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.6) +
# General plotting controls
scale_color_gradientn(colors = pal,
name = expression(paste(bold("Information\ncorrelation, "), italic(gamma))),
breaks = seq(-1, 1, 0.5),
labels = c("-1.0   (Opposing coverage)",
"-0.5",
"0.0   (Disjointed coverage)",
"0.5",
"1.0   (Mirrored coverage)")) +
scale_x_continuous(labels = comma) +
ylab(expression( paste("Cascade size, ", italic(X[paste(A, ",", t)] + X[paste(B, ",", t)])))) +
xlab(expression(paste("Time step, ", italic(t) ))) +
theme_ctokita() +
theme(legend.key.height = unit(5, "mm"),
legend.title = element_text(face = "bold"))
gg_size + theme(legend.position = "none")
ggsave("output/network_break/plots/CascadeSize_gamma.png", width = 90, height = 45, units = "mm", dpi = 400)
# Cascade bias
gg_diff <- ggplot() +
# Plot all data
geom_line(data = cascade_data,
aes(group = gamma, x = start, y = actdiff_mean, color = gamma),
size = 0.2,
alpha = 0.5) +
geom_point(data = cascade_ends,
aes(group = gamma, x = start, y = actdiff_mean, color = gamma),
size = 0.1) +
# Plot emphasis lines
geom_line(data = cascade_emph,
aes(group = gamma, x = start, y = actdiff_mean, color = gamma),
size = 0.3) +
geom_point(data = cascade_emph_ends,
aes(group = gamma, x = start, y = actdiff_mean, color = gamma),
size = 0.6) +
# General plotting controls
scale_color_gradientn(colors = pal,
name = expression(paste("Information\ncorrelation (", gamma, ")"))) +
scale_y_continuous(breaks = seq(0, 0.4, 0.05)) +
scale_x_continuous(labels = comma) +
ylab(expression( paste("Cascade bias, |", italic(X[paste(A, ",", t)] - X[paste(B, ",", t)]), "| / ", italic(X[t])) )) +
xlab(expression(paste("Time step, ", italic(t) ))) +
theme_ctokita() +
theme(legend.position = "none")
gg_diff
ggsave("output/network_break/plots/CascadeDiff_gamma.png", width = 90, height = 45, units = "mm", dpi = 400)
##########
# Plot: Rolling averages
##########
# Cascade size
gg_size <- ggplot() +
# Plot all data
geom_line(data = cascade_data,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.2,
alpha = 0.5) +
geom_point(data = cascade_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.1) +
# Plot emphasis lines
geom_line(data = cascade_emph,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.3) +
geom_point(data = cascade_emph_ends,
aes(group = gamma, x = start, y = active_mean, color = gamma),
size = 0.6) +
# General plotting controls
scale_color_gradientn(colors = pal,
name = expression(paste(bold("Information\ncorrelation, "), italic(gamma))),
breaks = seq(-1, 1, 0.5),
labels = c("-1.0   (Opposing coverage)",
"-0.5",
"0.0   (Disjointed coverage)",
"0.5",
"1.0   (Mirrored coverage)")) +
scale_x_continuous(labels = comma) +
ylab(expression( paste("Cascade size, ", italic(X[t]) ))) +
xlab(expression(paste("Time step, ", italic(t) ))) +
theme_ctokita() +
theme(legend.key.height = unit(5, "mm"),
legend.title = element_text(face = "bold"))
gg_size + theme(legend.position = "none")
ggsave("output/network_break/plots/CascadeSize_gamma.png", width = 90, height = 45, units = "mm", dpi = 400)
