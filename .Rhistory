label = labs,
name = key_name) +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.text.align = 0)
gg_correct
ggsave(plot = gg_correct,
filename = paste0(out_path, "fitness/Comparison_MessageCorrect.png"),
width = 90,
height = 45,
units = "mm",
dpi = 400)
##########
# Plot: Proportion of incorrect messages received
##########
gg_incorrect <- ggplot(data = fitness_data, aes(x = gamma, y = incorrect_message_mean, color = run)) +
geom_ribbon(aes(ymin = incorrect_message_mean - incorrect_message_95ci,
ymax = incorrect_message_mean + incorrect_message_95ci,
fill = run),
alpha = 0.4,
color = NA,
position = position_dodge(width = dodge_width)) +
geom_line(size = 0.3,
position = position_dodge(width = dodge_width)) +
geom_point(size = 0.8,
position = position_dodge(width = dodge_width)) +
ylab("Freq. incorrect message received") +
xlab(expression( paste("Information correlation ", italic(gamma)) )) +
scale_color_manual(values = pal,
label = labs,
name = key_name) +
scale_fill_manual(values = pal,
label = labs,
name = key_name) +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.text.align = 0)
gg_incorrect
ggsave(plot = gg_incorrect,
filename = paste0(out_path, "fitness/Comparison_MessageIncorrect.png"),
width = 90,
height = 45,
units = "mm",
dpi = 400)
##########
# Load packages
##########
library(ggplot2)
library(dplyr)
##########
# Plot parameters
##########
# Plot out
out_path <- "output/thresh_adjust/"
# Plot variables
dodge_width = 0.05
pal <- c("#e66101", "#bababa", "#5e3c99")
labs <- c(expression(paste("Care more about being right")),
expression(paste("Care equally")),
expression(paste("Care more about being wrong")))
key_name <- "Threshold\ndynamics"
####################
# Load and process data
####################
# Cascade data
cascade_files <- list.files("data_derived/thresh_adjust/cascades/", full.names = TRUE)
cascade_data <- lapply(cascade_files, function(file) {
run_data <-  read.csv(file, header = TRUE)
parameters <- gsub(".*_([a-z]+)\\.csv", "\\1", file, perl = TRUE)
run_sum <- run_data %>%
select(gamma, total_active) %>%
group_by(gamma) %>%
summarise_each(list(size_mean = mean,
size_sd = sd,
rep_count = length)) %>%
mutate(size_95ci = qnorm(0.975) * size_sd / sqrt(rep_count),
run = parameters)
cascade_diff <- run_data %>%
select(gamma, active_diff_prop) %>%
group_by(gamma) %>%
summarise_each(list(bias_mean = mean,
bias_sd = sd,
rep_count = length)) %>%
mutate(bias_95ci = qnorm(0.975) * bias_sd / sqrt(rep_count))
run_sum <- merge(run_sum, cascade_diff)
return(run_sum)
})
cascade_data <- do.call('rbind', cascade_data)
cascade_data$run <- factor(cascade_data$run, levels = c("muchlargerphi", "equal", "muchlargeromega"))
# Fitness data
fitness_files <- list.files("data_derived/thresh_adjust/fitness/", pattern = ".*allbehavior.*",  full.names = TRUE)
fitness_data <- lapply(fitness_files, function(file) {
run_data <-  read.csv(file, header = TRUE)
parameters <- gsub(".*_([a-z]+)\\.csv", "\\1", file, perl = TRUE)
run_sum <- run_data %>%
select(-replicate) %>%
mutate(fitness = correct_message - incorrect_message ) %>%
# mutate(fitness = ifelse(fitness == Inf, 10, fitness)) %>% #need to figure out how to deal with Inf values
group_by(gamma) %>%
summarise_each(funs(mean(., na.rm = TRUE), sd(., na.rm = TRUE))) %>%
mutate(correct_message_95ci = qnorm(0.975) * correct_message_sd/sqrt(100 * 200),
incorrect_message_95ci = qnorm(0.975) * incorrect_message_sd/sqrt(100 * 200),
fitness_95ci = qnorm(0.975) * fitness_sd/sqrt(100 * 200),
run = parameters)
gamma_zero_fitness <- run_sum$fitness_mean[run_sum$gamma == 0]
run_sum <- run_sum %>%
mutate(fitness_mean_norm = (fitness_mean - gamma_zero_fitness) / gamma_zero_fitness)
return(run_sum)
})
fitness_data <- do.call('rbind', fitness_data)
fitness_data$run <- factor(fitness_data$run, levels = c("muchlargerphi", "equal", "muchlargeromega"))
####################
# My preferred theme
####################
theme_ctokita <- function() {
theme_classic() +
theme(axis.text       = element_text(size = 6, color = "black"),
axis.title      = element_text(size = 7, color = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3),
legend.title    = element_text(size = 7, face = "bold", vjust = -1),
legend.text     = element_text(size = 6, color = "black"),
strip.text      = element_text(size = 7, color = "black"),
legend.key.size = unit(3, "mm"))
}
########## Cascades #########
##########
# Plot: Cascade size
##########
gg_size <- ggplot(cascade_data, aes(x = gamma, y = size_mean, color = run)) +
geom_ribbon(aes(ymin = size_mean - size_95ci,
ymax = size_mean + size_95ci,
fill = run),
alpha = 0.4,
color = NA,
position = position_dodge(width = dodge_width)) +
geom_line(size = 0.3,
position = position_dodge(width = dodge_width)) +
geom_point(size = 0.8,
position = position_dodge(width = dodge_width)) +
ylab("Cascade size ") +
xlab(expression(paste("Information correlation ", italic(gamma) ))) +
scale_color_manual(values = pal,
label = labs,
name = key_name) +
scale_fill_manual(values = pal,
label = labs,
name = key_name) +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.text.align = 0)
gg_size
ggsave(plot = gg_size,
filename = paste0(out_path, "cascades/Comparison_CascadeSize.png"),
width = 70,
height = 45,
units = "mm",
dpi = 400)
##############################
#
# PLOT: Compare threshold-adjusting model outputs for fitness anc cascades
#
##############################
##########
# Load packages
##########
library(ggplot2)
library(dplyr)
##########
# Plot parameters
##########
# Plot out
out_path <- "output/thresh_adjust/"
# Plot variables
dodge_width = 0.05
pal <- c("#e66101", "#bababa", "#5e3c99")
labs <- c(expression(paste("Care more about being right")),
expression(paste("Care equally")),
expression(paste("Care more about being wrong")))
key_name <- "Threshold\ndynamics"
####################
# Load and process data
####################
# Cascade data
cascade_files <- list.files("data_derived/thresh_adjust/cascades/", full.names = TRUE)
cascade_data <- lapply(cascade_files, function(file) {
run_data <-  read.csv(file, header = TRUE)
parameters <- gsub(".*_([a-z]+)\\.csv", "\\1", file, perl = TRUE)
run_sum <- run_data %>%
select(gamma, total_active) %>%
group_by(gamma) %>%
summarise_each(list(size_mean = mean,
size_sd = sd,
rep_count = length)) %>%
mutate(size_95ci = qnorm(0.975) * size_sd / sqrt(rep_count),
run = parameters)
cascade_diff <- run_data %>%
select(gamma, active_diff_prop) %>%
group_by(gamma) %>%
summarise_each(list(bias_mean = mean,
bias_sd = sd,
rep_count = length)) %>%
mutate(bias_95ci = qnorm(0.975) * bias_sd / sqrt(rep_count))
run_sum <- merge(run_sum, cascade_diff)
return(run_sum)
})
cascade_data <- do.call('rbind', cascade_data)
cascade_data$run <- factor(cascade_data$run, levels = c("muchlargerphi", "equal", "muchlargeromega"))
# Fitness data
fitness_files <- list.files("data_derived/thresh_adjust/fitness/", pattern = ".*allbehavior.*",  full.names = TRUE)
fitness_data <- lapply(fitness_files, function(file) {
run_data <-  read.csv(file, header = TRUE)
parameters <- gsub(".*_([a-z]+)\\.csv", "\\1", file, perl = TRUE)
run_sum <- run_data %>%
select(-replicate) %>%
mutate(fitness = correct_message - incorrect_message ) %>%
# mutate(fitness = ifelse(fitness == Inf, 10, fitness)) %>% #need to figure out how to deal with Inf values
group_by(gamma) %>%
summarise_each(funs(mean(., na.rm = TRUE), sd(., na.rm = TRUE))) %>%
mutate(correct_message_95ci = qnorm(0.975) * correct_message_sd/sqrt(100 * 200),
incorrect_message_95ci = qnorm(0.975) * incorrect_message_sd/sqrt(100 * 200),
fitness_95ci = qnorm(0.975) * fitness_sd/sqrt(100 * 200),
run = parameters)
gamma_zero_fitness <- run_sum$fitness_mean[run_sum$gamma == 0]
run_sum <- run_sum %>%
mutate(fitness_mean_norm = (fitness_mean - gamma_zero_fitness) / gamma_zero_fitness)
return(run_sum)
})
fitness_data <- do.call('rbind', fitness_data)
fitness_data$run <- factor(fitness_data$run, levels = c("muchlargerphi", "equal", "muchlargeromega"))
####################
# My preferred theme
####################
theme_ctokita <- function() {
theme_classic() +
theme(axis.text       = element_text(size = 6, color = "black"),
axis.title      = element_text(size = 7, color = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3),
legend.title    = element_text(size = 7, face = "bold", vjust = -1),
legend.text     = element_text(size = 6, color = "black"),
strip.text      = element_text(size = 7, color = "black"),
legend.key.size = unit(3, "mm"))
}
########## Cascades #########
##########
# Plot: Cascade size
##########
gg_size <- ggplot(cascade_data, aes(x = gamma, y = size_mean, color = run)) +
geom_ribbon(aes(ymin = size_mean - size_95ci,
ymax = size_mean + size_95ci,
fill = run),
alpha = 0.4,
color = NA,
position = position_dodge(width = dodge_width)) +
geom_line(size = 0.3,
position = position_dodge(width = dodge_width)) +
geom_point(size = 0.8,
position = position_dodge(width = dodge_width)) +
ylab("Cascade size ") +
xlab(expression(paste("Information correlation ", italic(gamma) ))) +
scale_color_manual(values = pal,
label = labs,
name = key_name) +
scale_fill_manual(values = pal,
label = labs,
name = key_name) +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.text.align = 0)
gg_size
ggsave(plot = gg_size,
filename = paste0(out_path, "cascades/Comparison_CascadeSize.png"),
width = 90,
height = 45,
units = "mm",
dpi = 400)
##########
# Plot: Cascade bias
##########
gg_bias <- ggplot(cascade_data, aes(x = gamma, y = bias_mean, color = run)) +
geom_ribbon(aes(ymin = bias_mean - bias_95ci,
ymax = bias_mean + bias_95ci,
fill = run),
alpha = 0.4,
color = NA,
position = position_dodge(width = dodge_width)) +
geom_line(size = 0.3,
position = position_dodge(width = dodge_width)) +
geom_point(size = 0.8,
position = position_dodge(width = dodge_width)) +
ylab(expression( "Cascade bias" )) +
xlab(expression(paste("Information correlation ", italic(gamma) ))) +
scale_color_manual(values = pal,
label = labs,
name = key_name) +
scale_fill_manual(values = pal,
label = labs,
name = key_name) +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.text.align = 0)
gg_bias
ggsave(plot = gg_bias,
filename = paste0(out_path, "cascades/Comparison_CascadeBias.png"),
width = 90,
height = 45,
units = "mm",
dpi = 400)
########## Fitness #########
##########
# Plot: Proportion of messages received that an individual would want (i.e., greater than threshold)
##########
gg_correct <- ggplot(data = fitness_data, aes(x = gamma, y = correct_message_mean, color = run)) +
geom_ribbon(aes(ymin = correct_message_mean - correct_message_95ci,
ymax = correct_message_mean + correct_message_95ci,
fill = run),
alpha = 0.4,
color = NA,
position = position_dodge(width = dodge_width)) +
geom_line(size = 0.3,
position = position_dodge(width = dodge_width)) +
geom_point(size = 0.8,
position = position_dodge(width = dodge_width)) +
ylab("Freq. correct message received") +
xlab(expression( paste("Information correlation ", italic(gamma)) )) +
scale_color_manual(values = pal,
label = labs,
name = key_name) +
scale_fill_manual(values = pal,
label = labs,
name = key_name) +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.text.align = 0)
gg_correct
ggsave(plot = gg_correct,
filename = paste0(out_path, "fitness/Comparison_MessageCorrect.png"),
width = 90,
height = 45,
units = "mm",
dpi = 400)
##########
# Plot: Proportion of incorrect messages received
##########
gg_incorrect <- ggplot(data = fitness_data, aes(x = gamma, y = incorrect_message_mean, color = run)) +
geom_ribbon(aes(ymin = incorrect_message_mean - incorrect_message_95ci,
ymax = incorrect_message_mean + incorrect_message_95ci,
fill = run),
alpha = 0.4,
color = NA,
position = position_dodge(width = dodge_width)) +
geom_line(size = 0.3,
position = position_dodge(width = dodge_width)) +
geom_point(size = 0.8,
position = position_dodge(width = dodge_width)) +
ylab("Freq. incorrect message received") +
xlab(expression( paste("Information correlation ", italic(gamma)) )) +
scale_color_manual(values = pal,
label = labs,
name = key_name) +
scale_fill_manual(values = pal,
label = labs,
name = key_name) +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.text.align = 0)
gg_incorrect
ggsave(plot = gg_incorrect,
filename = paste0(out_path, "fitness/Comparison_MessageIncorrect.png"),
width = 90,
height = 45,
units = "mm",
dpi = 400)
source('~/Documents/Research/Tarnita Lab/Information Cascades/information-cascades/scripts/plot_fitness.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Information Cascades/information-cascades/scripts/plot_fitness.R', echo=TRUE)
theme_classic() +
theme(axis.text       = element_text(size = 6, color = "black"),
axis.title      = element_text(size = 7, color = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3),
legend.title    = element_text(size = 7, face = "bold", vjust = -1),
legend.text     = element_text(size = 6, color = "black"),
strip.text      = element_text(size = 7, color = "black"),
legend.key.size = unit(3, "mm"),
legend.text.align = 0,
aspect.ratio = 1)
source('~/Documents/Research/Tarnita Lab/Information Cascades/information-cascades/scripts/suppl_analysis/plot_threshadjust_fitnesscascade.R', echo=TRUE)
##########
# Load packages
##########
library(ggplot2)
library(dplyr)
####################
# My preferred theme
####################
theme_ctokita <- function() {
theme_classic() +
theme(axis.text       = element_text(size = 6, color = "black"),
axis.title      = element_text(size = 7, color = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3),
legend.title    = element_text(size = 7, face = "bold", vjust = -1),
legend.text     = element_text(size = 6, color = "black"),
strip.text      = element_text(size = 7, color = "black"),
legend.key.size = unit(3, "mm"))
}
############## Assortatiity ##############
##########
# Load data and summarise
##########
# Normal sim (random network)
rand_data <- read.csv('data_derived/network_break/social_networks/n200_assortativity_gammasweep.csv', header = TRUE)
rand_sum <- rand_data %>%
mutate(delta_assort = assort_final - assort_initial) %>%
group_by(gamma) %>%
summarise(assort_mean = mean(assort_final),
assort_sd = sd(assort_final),
assort_95error = qnorm(0.975)*sd(assort_final)/sqrt(length(assort_final)),
assortchange_mean = mean(delta_assort),
assortchange_sd = sd(delta_assort),
assortchange_95error = qnorm(0.975)*sd(delta_assort)/sqrt(length(delta_assort))) %>%
mutate(network_type = "Random (default)")
# Scale-free network
sf_data <- read.csv('data_derived/network_break/__suppl_analysis/other_network_types/n200_scalefree_assortativity.csv', header = TRUE)
sf_sum <- sf_data %>%
mutate(delta_assort = assort_final - assort_initial) %>%
group_by(gamma) %>%
summarise(assort_mean = mean(assort_final),
assort_sd = sd(assort_final),
assort_95error = qnorm(0.975)*sd(assort_final)/sqrt(length(assort_final)),
assortchange_mean = mean(delta_assort),
assortchange_sd = sd(delta_assort),
assortchange_95error = qnorm(0.975)*sd(delta_assort)/sqrt(length(delta_assort))) %>%
mutate(network_type = "Scale-free")
# Complete network
comp_data <- read.csv('data_derived/network_break/__suppl_analysis/other_network_types/n200_assortativity_completegraph.csv', header = TRUE)
comp_sum <- comp_data %>%
mutate(delta_assort = assort_final - assort_initial) %>%
group_by(gamma) %>%
summarise(assort_mean = mean(assort_final),
assort_sd = sd(assort_final),
assort_95error = qnorm(0.975)*sd(assort_final)/sqrt(length(assort_final)),
assortchange_mean = mean(delta_assort),
assortchange_sd = sd(delta_assort),
assortchange_95error = qnorm(0.975)*sd(delta_assort)/sqrt(length(delta_assort))) %>%
mutate(network_type = "Complete")
# Regular network
reg_data <- read.csv('data_derived/network_break/__suppl_analysis/other_network_types/n200_regular_assortativity.csv', header = TRUE)
reg_sum <- reg_data %>%
mutate(delta_assort = assort_final - assort_initial) %>%
group_by(gamma) %>%
summarise(assort_mean = mean(assort_final),
assort_sd = sd(assort_final),
assort_95error = qnorm(0.975)*sd(assort_final)/sqrt(length(assort_final)),
assortchange_mean = mean(delta_assort),
assortchange_sd = sd(delta_assort),
assortchange_95error = qnorm(0.975)*sd(delta_assort)/sqrt(length(delta_assort))) %>%
mutate(network_type = "Regular")
# Bind
assort_sum <- rbind(rand_sum, sf_sum, comp_sum, reg_sum)
# Bind
assort_sum <- rbind(rand_sum, sf_sum, comp_sum, reg_sum) %>%
mutate(network_type = factor(network_type, levels = c("Random (default)", "Regular", "Scale-free", "Complete")))
##########
# Plot
##########
# Raw final assortativity values
pal <- c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3")
gg_assort_networktype <- ggplot(data = assort_sum,
aes(x = gamma,
y = assort_mean,
color = network_type,
group = network_type,
fill = network_type)) +
geom_hline(aes(yintercept = 0),
size = 0.3,
linetype = "dotted") +
geom_ribbon(aes(ymin = assort_mean - assort_95error, ymax = assort_mean + assort_95error),
alpha = 0.4,
color = NA) +
geom_line(size = 0.3) +
geom_point(size = 0.8) +
scale_color_manual(name = "Network type", values = pal) +
scale_fill_manual(name = "Network type", values = pal) +
ylab(expression( paste("Assortativity, ", italic(r[global])) )) +
xlab(expression( paste("Information correlation ", italic(gamma)) )) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_assort_networktype
gg_assort_networktype <- ggplot(data = assort_sum,
aes(x = gamma,
y = assort_mean,
color = network_type,
group = network_type,
fill = network_type)) +
geom_hline(aes(yintercept = 0),
size = 0.3,
linetype = "dotted") +
geom_ribbon(aes(ymin = assort_mean - assort_95error, ymax = assort_mean + assort_95error),
alpha = 0.4,
color = NA) +
geom_line(size = 0.3) +
geom_point(size = 0.8) +
scale_color_manual(name = "Network type", values = pal) +
scale_fill_manual(name = "Network type", values = pal) +
ylab(expression( paste("Assortativity ", italic(r[global])) )) +
xlab(expression( paste("Information correlation ", italic(gamma)) )) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_assort_networktype
ggsave(plot = gg_assort_networktype, filename = "output/network_break/suppl_analysis/Assortativity_by_networktype.png", height = 45, width = 90, units = "mm", dpi = 400)
