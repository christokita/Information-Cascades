##########
# Summarise by gamma
cascade_diff <- cascade_data %>%
select(gamma, active_diff) %>%
group_by(gamma) %>%
summarise_each(list(bias_mean = mean,
bias_sd = sd,
rep_count = length)) %>%
mutate(bias_95ci = qnorm(0.975) * bias_sd / sqrt(rep_count))
# Summarizing plot
gg_diff <- ggplot(cascade_diff, aes(x = gamma, y = bias_mean)) +
# Plot all data
geom_errorbar(aes(ymin = bias_mean - bias_95ci, ymax = bias_mean + bias_95ci),
size = 0.2,
width = 0) +
geom_point(size = 0.8) +
# General plotting controls
# scale_y_continuous(limits = c(0, 0.16)) +
ylab(expression( paste("Cascade bias" ))) +
xlab(expression(paste("Information correlation, ", italic(gamma) ))) +
theme_ctokita()
gg_diff
##########
# Plot: Cascade bias
##########
# Summarise by gamma
cascade_diff <- cascade_data %>%
select(gamma, active_diff_prop) %>%
group_by(gamma) %>%
summarise_each(list(bias_mean = mean,
bias_sd = sd,
rep_count = length)) %>%
mutate(bias_95ci = qnorm(0.975) * bias_sd / sqrt(rep_count))
# Summarizing plot
gg_diff <- ggplot(cascade_diff, aes(x = gamma, y = bias_mean)) +
# Plot all data
geom_errorbar(aes(ymin = bias_mean - bias_95ci, ymax = bias_mean + bias_95ci),
size = 0.2,
width = 0) +
geom_point(size = 0.8) +
# General plotting controls
# scale_y_continuous(limits = c(0, 0.16)) +
ylab(expression( paste("Cascade bias" ))) +
xlab(expression(paste("Information correlation, ", italic(gamma) ))) +
theme_ctokita()
gg_diff
##########
# Plot: Cascade bias
##########
# Summarise by gamma
cascade_diff <- cascade_data %>%
select(gamma, active_diff_prop) %>%
group_by(gamma) %>%
summarise_each(list(bias_mean = mean,
bias_sd = sd,
rep_count = length)) %>%
mutate(bias_95ci = qnorm(0.975) * bias_sd / sqrt(rep_count))
# Summarizing plot
gg_diff <- ggplot(cascade_diff, aes(x = gamma, y = bias_mean)) +
# Plot all data
geom_errorbar(aes(ymin = bias_mean - bias_95ci, ymax = bias_mean + bias_95ci),
size = 0.2,
width = 0) +
geom_point(size = 0.8) +
# General plotting controls
# scale_y_continuous(limits = c(0, 0.16)) +
ylab(expression( paste("Cascade bias" ))) +
xlab(expression(paste("Information correlation, ", italic(gamma) ))) +
theme_ctokita()
gg_diff
behav_data <- read.csv('output/network_break/data_derived/cascades/n200_fitness_allbehavior_gammasweep.csv', header = TRUE)
behav_sum <- behav_data %>%
select(-replicate) %>%
mutate(fitness = correct_message - incorrect_message ) %>%
# mutate(fitness = ifelse(fitness == Inf, 10, fitness)) %>% #need to figure out how to deal with Inf values
group_by(gamma) %>%
summarise_each(funs(mean(., na.rm = TRUE), sd(., na.rm = TRUE))) %>%
mutate(correct_message_95ci = qnorm(0.975) * correct_message_sd/sqrt(100 * 200),
incorrect_message_95ci = qnorm(0.975) * incorrect_message_sd/sqrt(100 * 200),
fitness_95ci = qnorm(0.975) * fitness_sd/sqrt(100 * 200))
gamma_zero_fitness <- behav_sum$fitness_mean[behav_sum$gamma == 0]
behav_sum <- behav_sum %>%
mutate(fitness_mean_norm = (fitness_mean - gamma_zero_fitness) / gamma_zero_fitness)
##########
# Plot
##########
# Proportion of messages received that an individual would want (i.e., greater than threshold)
gg_correct <- ggplot(data = behav_sum, aes(x = gamma, y = correct_message_mean)) +
geom_errorbar(aes(ymin = correct_message_mean - correct_message_95ci,
ymax = correct_message_mean + correct_message_95ci),
size = 0.2,
width = 0) +
geom_point(size = 0.8) +
ylab("Freq. correct message received") +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_correct
# Proportion of incorrect messages received
gg_incorrect <- ggplot(data = behav_sum, aes(x = gamma, y = incorrect_message_mean)) +
geom_errorbar(aes(ymin = incorrect_message_mean - incorrect_message_95ci,
ymax = incorrect_message_mean + incorrect_message_95ci),
size = 0.2,
width = 0) +
geom_point(size = 0.8) +
ylab("Freq. incorrect message received") +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_incorrect
View(behav_sum)
View(behav_data)
# Individual fitness (i.e., ratio of correct/incorrect messages received)
gg_fitness <- ggplot(data = behav_sum, aes(x = gamma, y = fitness_mean_norm)) +
# geom_errorbar(aes(ymin = fitness_mean - fitness_95ci,
#                   ymax = fitness_mean + fitness_95ci),
#               size = 0.2,
#               width = 0) +
geom_point(size = 0.8) +
geom_hline(yintercept = 0) +
ylab("Individual fitness") +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_fitness
# Individual fitness (i.e., ratio of correct/incorrect messages received)
gg_fitness <- ggplot(data = behav_sum, aes(x = gamma, y = fitness_mean)) +
# geom_errorbar(aes(ymin = fitness_mean - fitness_95ci,
#                   ymax = fitness_mean + fitness_95ci),
#               size = 0.2,
#               width = 0) +
geom_point(size = 0.8) +
geom_hline(yintercept = 0) +
ylab("Individual fitness") +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_fitness
##########
# Load data and summarise
##########
behav_data <- read.csv('output/network_break/data_derived/cascades/n200_fitness_allbehavior_gammasweep.csv', header = TRUE)
behav_sum <- behav_data %>%
select(-replicate) %>%
mutate(fitness = correct_message - incorrect_message ) %>%
# mutate(fitness = ifelse(fitness == Inf, 10, fitness)) %>% #need to figure out how to deal with Inf values
group_by(gamma) %>%
summarise_each(funs(mean(., na.rm = TRUE), sd(., na.rm = TRUE))) %>%
mutate(correct_message_95ci = qnorm(0.975) * correct_message_sd/sqrt(100 * 200),
incorrect_message_95ci = qnorm(0.975) * incorrect_message_sd/sqrt(100 * 200),
fitness_95ci = qnorm(0.975) * fitness_sd/sqrt(100 * 200))
gamma_zero_fitness <- behav_sum$fitness_mean[behav_sum$gamma == 0]
behav_sum <- behav_sum %>%
mutate(fitness_mean_norm = (fitness_mean - gamma_zero_fitness) / gamma_zero_fitness)
##########
# Plot
##########
# Proportion of messages received that an individual would want (i.e., greater than threshold)
gg_correct <- ggplot(data = behav_sum, aes(x = gamma, y = correct_message_mean)) +
geom_errorbar(aes(ymin = correct_message_mean - correct_message_95ci,
ymax = correct_message_mean + correct_message_95ci),
size = 0.2,
width = 0) +
geom_point(size = 0.8) +
ylab("Freq. correct message received") +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_correct
ggsave(plot = gg_correct,
filename = "output/network_break/plots/MessageCorrect_gamma.png",
width = 45,
height = 45,
units = "mm",
dpi = 400)
# Proportion of incorrect messages received
gg_incorrect <- ggplot(data = behav_sum, aes(x = gamma, y = incorrect_message_mean)) +
geom_errorbar(aes(ymin = incorrect_message_mean - incorrect_message_95ci,
ymax = incorrect_message_mean + incorrect_message_95ci),
size = 0.2,
width = 0) +
geom_point(size = 0.8) +
ylab("Freq. incorrect message received") +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_incorrect
ggsave(plot = gg_incorrect,
filename = "output/network_break/plots/MessageInorrect_gamma.png",
width = 45,
height = 45,
units = "mm",
dpi = 400)
View(behav_sum)
##########
# Load data and summarise
##########
behav_data <- read.csv('output/network_break/data_derived/cascades/n200_fitness_behaviorsum_gammasweep.csv', header = TRUE)
##########
# Load data and summarise
##########
behav_summed <- read.csv('output/network_break/data_derived/cascades/n200_fitness_behaviorsum_gammasweep.csv', header = TRUE)
behav_sum <- behav_summed %>%
select(-replicate) %>%
mutate(fitness = correct_message - incorrect_message ) %>%
# mutate(fitness = ifelse(fitness == Inf, 10, fitness)) %>% #need to figure out how to deal with Inf values
group_by(gamma) %>%
summarise_each(funs(mean(., na.rm = TRUE), sd(., na.rm = TRUE))) %>%
mutate(correct_message_95ci = qnorm(0.975) * correct_message_sd/sqrt(100 * 200),
incorrect_message_95ci = qnorm(0.975) * incorrect_message_sd/sqrt(100 * 200),
fitness_95ci = qnorm(0.975) * fitness_sd/sqrt(100 * 200))
gamma_zero_fitness <- behav_sum$fitness_mean[behav_sum$gamma == 0]
behav_sum <- behav_sum %>%
mutate(fitness_mean_norm = (fitness_mean - gamma_zero_fitness) / gamma_zero_fitness)
# Proportion of incorrect messages received
gg_incorrect <- ggplot(data = behav_sum, aes(x = gamma, y = incorrect_message_mean)) +
geom_errorbar(aes(ymin = incorrect_message_mean - incorrect_message_95ci,
ymax = incorrect_message_mean + incorrect_message_95ci),
size = 0.2,
width = 0) +
geom_point(size = 0.8) +
ylab("Freq. incorrect message received") +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_incorrect
##########
# Plot
##########
# Proportion of messages received that an individual would want (i.e., greater than threshold)
gg_correct <- ggplot(data = behav_sum, aes(x = gamma, y = correct_message_mean)) +
geom_errorbar(aes(ymin = correct_message_mean - correct_message_95ci,
ymax = correct_message_mean + correct_message_95ci),
size = 0.2,
width = 0) +
geom_point(size = 0.8) +
ylab("Freq. correct message received") +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_correct
##########
# Load packages
##########
library(ggplot2)
library(dplyr)
####################
# My preferred theme
####################
theme_ctokita <- function() {
theme_classic() +
theme(axis.text       = element_text(size = 6, color = "black"),
axis.title      = element_text(size = 7, color = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3),
legend.title    = element_text(size = 7, face = "bold", vjust = -1),
legend.text     = element_text(size = 6, color = "black"),
strip.text      = element_text(size = 7, color = "black"),
legend.key.size = unit(3, "mm"))
}
############## Assortatiity ##############
assort_data <- read.csv('output/network_break/data_derived/social_networks/n200_gammasweep_assortativity.csv', header = TRUE)
assort_sum <- assort_data %>%
mutate(delta_assort = assort_final - assort_initial) %>%
group_by(gamma) %>%
summarise(assort_mean = mean(assort_final),
assort_sd = sd(assort_final),
assort_95error = qnorm(0.975)*sd(assort_final)/sqrt(length(assort_final)),
assortchange_mean = mean(delta_assort),
assortchange_sd = sd(delta_assort),
assortchange_95error = qnorm(0.975)*sd(delta_assort)/sqrt(length(delta_assort)))
assort_data <- read.csv('output/network_break/data_derived/social_networks/n200_gammasweep_assortativity.csv', header = TRUE)
assort_sum <- assort_data %>%
mutate(delta_assort = assort_final - assort_initial) %>%
group_by(gamma) %>%
summarise(assort_mean = mean(assort_final),
assort_sd = sd(assort_final),
assort_95error = qnorm(0.975)*sd(assort_final)/sqrt(length(assort_final)),
assortchange_mean = mean(delta_assort),
assortchange_sd = sd(delta_assort),
assortchange_95error = qnorm(0.975)*sd(delta_assort)/sqrt(length(delta_assort)
View(assort_sum)
View(assort_sum)
source('~/Documents/Research/Tarnita Lab/Information Cascades/information-cascades/scripts/suppl_analysis/plot_initialnetworkstructure.R', echo=TRUE)
assort_data <- read.csv('output/network_break/data_derived/social_networks/n200_gammasweep_assortativity.csv', header = TRUE)
assort_sum <- assort_data %>%
mutate(delta_assort = assort_final - assort_initial) %>%
group_by(gamma) %>%
summarise(assort_mean = mean(assort_final),
assort_sd = sd(assort_final),
assort_95error = qnorm(0.975)*sd(assort_final)/sqrt(length(assort_final)),
assortchange_mean = mean(delta_assort),
assortchange_sd = sd(delta_assort),
assortchange_95error = qnorm(0.975)*sd(delta_assort)/sqrt(length(delta_assort))) %>%
mutate(network_type = "Random")
View(assort_sum)
rand_data <- read.csv('output/network_break/data_derived/social_networks/n200_gammasweep_assortativity.csv', header = TRUE)
rand_sum <- rand_data %>%
mutate(delta_assort = assort_final - assort_initial) %>%
group_by(gamma) %>%
summarise(assort_mean = mean(assort_final),
assort_sd = sd(assort_final),
assort_95error = qnorm(0.975)*sd(assort_final)/sqrt(length(assort_final)),
assortchange_mean = mean(delta_assort),
assortchange_sd = sd(delta_assort),
assortchange_95error = qnorm(0.975)*sd(delta_assort)/sqrt(length(delta_assort))) %>%
mutate(network_type = "Random")
# Scale-network
sf_data <- read.csv('output/network_break/data_derived/social_networks/n200_scalefree_assortativity.csv', header = TRUE)
sf_sum <- sf %>%
mutate(delta_assort = assort_final - assort_initial) %>%
group_by(gamma) %>%
summarise(assort_mean = mean(assort_final),
assort_sd = sd(assort_final),
assort_95error = qnorm(0.975)*sd(assort_final)/sqrt(length(assort_final)),
assortchange_mean = mean(delta_assort),
assortchange_sd = sd(delta_assort),
assortchange_95error = qnorm(0.975)*sd(delta_assort)/sqrt(length(delta_assort))) %>%
mutate(network_type = "Scale-free")
sf_sum <- sf_data %>%
mutate(delta_assort = assort_final - assort_initial) %>%
group_by(gamma) %>%
summarise(assort_mean = mean(assort_final),
assort_sd = sd(assort_final),
assort_95error = qnorm(0.975)*sd(assort_final)/sqrt(length(assort_final)),
assortchange_mean = mean(delta_assort),
assortchange_sd = sd(delta_assort),
assortchange_95error = qnorm(0.975)*sd(delta_assort)/sqrt(length(delta_assort))) %>%
mutate(network_type = "Scale-free")
rm(rand_data, rand_sum, sf_data, sf_sum)
# Normal sim (random network)
rand_data <- read.csv('output/network_break/data_derived/social_networks/n200_gammasweep_assortativity.csv', header = TRUE)
rand_sum <- rand_data %>%
mutate(delta_assort = assort_final - assort_initial) %>%
group_by(gamma) %>%
summarise(assort_mean = mean(assort_final),
assort_sd = sd(assort_final),
assort_95error = qnorm(0.975)*sd(assort_final)/sqrt(length(assort_final)),
assortchange_mean = mean(delta_assort),
assortchange_sd = sd(delta_assort),
assortchange_95error = qnorm(0.975)*sd(delta_assort)/sqrt(length(delta_assort))) %>%
mutate(network_type = "Random")
# Scale-network
sf_data <- read.csv('output/network_break/data_derived/social_networks/n200_scalefree_assortativity.csv', header = TRUE)
sf_sum <- sf_data %>%
mutate(delta_assort = assort_final - assort_initial) %>%
group_by(gamma) %>%
summarise(assort_mean = mean(assort_final),
assort_sd = sd(assort_final),
assort_95error = qnorm(0.975)*sd(assort_final)/sqrt(length(assort_final)),
assortchange_mean = mean(delta_assort),
assortchange_sd = sd(delta_assort),
assortchange_95error = qnorm(0.975)*sd(delta_assort)/sqrt(length(delta_assort))) %>%
mutate(network_type = "Scale-free")
# Bind
assort_sum <- rbind(rand_sum, sf_sum)
rm(rand_data, rand_sum, sf_data, sf_sum)
##########
# Plot
##########
# Raw final assortativity values
gg_assort_networktype <- ggplot(data = assort_sum, aes(x = gamma, y = assort_mean, color = network_type)) +
geom_hline(aes(yintercept = 0),
size = 0.3,
linetype = "dotted") +
geom_ribbon(aes(ymin = assort_mean - assort_95error, ymax = assort_mean + assort_95error),
alpha = 0.4,
fill = "#525252") +
geom_line(color = "#000000",
size = 0.3) +
geom_point(color = "#000000",
size = 0.8) +
ylab(expression( paste("Assortativity, ", italic(r[global])) )) +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_assort_networktype
##########
# Plot
##########
# Raw final assortativity values
gg_assort_networktype <- ggplot(data = assort_sum, aes(x = gamma, y = assort_mean, color = network_type)) +
geom_hline(aes(yintercept = 0),
size = 0.3,
linetype = "dotted") +
geom_ribbon(aes(ymin = assort_mean - assort_95error, ymax = assort_mean + assort_95error),
alpha = 0.4) +
geom_line(color = "#000000",
size = 0.3) +
geom_point(color = "#000000",
size = 0.8) +
ylab(expression( paste("Assortativity, ", italic(r[global])) )) +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_assort_networktype
##########
# Plot
##########
# Raw final assortativity values
gg_assort_networktype <- ggplot(data = assort_sum, aes(x = gamma, y = assort_mean, color = network_type, group = network_type)) +
geom_hline(aes(yintercept = 0),
size = 0.3,
linetype = "dotted") +
geom_ribbon(aes(ymin = assort_mean - assort_95error, ymax = assort_mean + assort_95error),
alpha = 0.4) +
geom_line(color = "#000000",
size = 0.3) +
geom_point(color = "#000000",
size = 0.8) +
ylab(expression( paste("Assortativity, ", italic(r[global])) )) +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_assort_networktype
##########
# Plot
##########
# Raw final assortativity values
gg_assort_networktype <- ggplot(data = assort_sum,
aes(x = gamma,
y = assort_mean,
color = network_type,
group = network_type,
fill = network_type)) +
geom_hline(aes(yintercept = 0),
size = 0.3,
linetype = "dotted") +
geom_ribbon(aes(ymin = assort_mean - assort_95error, ymax = assort_mean + assort_95error),
alpha = 0.4) +
geom_line(size = 0.3) +
geom_point(size = 0.8) +
ylab(expression( paste("Assortativity, ", italic(r[global])) )) +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_assort_networktype
##########
# Plot
##########
# Raw final assortativity values
gg_assort_networktype <- ggplot(data = assort_sum,
aes(x = gamma,
y = assort_mean,
color = network_type,
group = network_type,
fill = network_type)) +
geom_hline(aes(yintercept = 0),
size = 0.3,
linetype = "dotted") +
geom_ribbon(aes(ymin = assort_mean - assort_95error, ymax = assort_mean + assort_95error),
alpha = 0.4) +
geom_line(size = 0.3) +
geom_point(size = 0.8) +
ylab(expression( paste("Assortativity, ", italic(r[global])) )) +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_assort_networktype
##########
# Plot
##########
# Raw final assortativity values
gg_assort_networktype <- ggplot(data = assort_sum,
aes(x = gamma,
y = assort_mean,
color = network_type,
group = network_type,
fill = network_type)) +
geom_hline(aes(yintercept = 0),
size = 0.3,
linetype = "dotted") +
geom_ribbon(aes(ymin = assort_mean - assort_95error, ymax = assort_mean + assort_95error),
alpha = 0.4,
color = NA) +
geom_line(size = 0.3) +
geom_point(size = 0.8) +
ylab(expression( paste("Assortativity, ", italic(r[global])) )) +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_assort_networktype
##########
# Plot
##########
# Raw final assortativity values
gg_assort_networktype <- ggplot(data = assort_sum,
aes(x = gamma,
y = assortchange_mean,
color = network_type,
group = network_type,
fill = network_type)) +
geom_hline(aes(yintercept = 0),
size = 0.3,
linetype = "dotted") +
geom_ribbon(aes(ymin = assort_mean - assort_95error, ymax = assort_mean + assort_95error),
alpha = 0.4,
color = NA) +
geom_line(size = 0.3) +
geom_point(size = 0.8) +
ylab(expression( paste("Assortativity, ", italic(r[global])) )) +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_assort_networktype
##########
# Plot
##########
# Raw final assortativity values
gg_assort_networktype <- ggplot(data = assort_sum,
aes(x = gamma,
y = assort_mean,
color = network_type,
group = network_type,
fill = network_type)) +
geom_hline(aes(yintercept = 0),
size = 0.3,
linetype = "dotted") +
geom_ribbon(aes(ymin = assort_mean - assort_95error, ymax = assort_mean + assort_95error),
alpha = 0.4,
color = NA) +
geom_line(size = 0.3) +
geom_point(size = 0.8) +
ylab(expression( paste("Assortativity, ", italic(r[global])) )) +
xlab(expression( paste("Information correlation, ", italic(gamma)) )) +
theme_ctokita()
gg_assort_networktype
